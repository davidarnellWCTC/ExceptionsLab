Parking Garage App

You are going to design and program a software application for automating the 
parking and collection of fees at commercial parking garages.

The requirements for this software product are:
We will assume that each student has been contracted by the owner of one of these garages and has been
asked to build the software app in a way that it could be used by ANY parking garage business, without
the need to change much of the code. In other words we want the software to be as flexible as possible
so that any garage can use it with as little customization as possible. Each garage business will have
their own copy of this program, configured for their business.

A key feature of this program is support for varying fee calculation formulas. Every commercial parking
garage business has a different way of calculating fees for parked cars. And often an individual parking
garage business will change its fee strategy, perhaps to increase the fees or better compete with other
garages. The result is that these fee strategies change often. We don’t want to have to revise existing
code every time a fee strategy changes. So the solution is to use the DIP/Strategy Pattern to create two or
more interchangeable implementations. Then, in the future, should new implementations be needed, a
programmer can create them based on a common interface and add them to the program. But only the
configuration info in the Startup class needs changing to use this – no other part of the program should
need source code changes. The new implementation can be used in the startup class – the only place
where code changes are allowed.

We will assume that two businesses are ready to use this software. The names of these businesses are:
“Best Value Parking Garage,” and “Thrifty Parking Garage”. Pick one and only one for your program.
Here are the current fee strategies options. Assume additional fee strategies will be added in the future,
but for now there are only two options. Assume only cars are parked and that the only criteria for fee
calculations are based on the following:

Minimum Maximum Fee Calculator
The fee charged for parked cars is based on a $2.00 minimum fee to park for up to three hours. After
that there is an additional $0.50 per hour charge for each hour or part of an hour parked. The maximum
charge for any given 24-hour period is $10.00. Assume that no car parks for longer than 24 hours.

Minimum No Maximum Fee Calculator
This fee is based on a $1.50 minimum fee to park for up to two hours. After that there is an additional
$0.75 per hour for each hour or part of an hour parked. There is no maximum charge. Assume that no
car parks for longer than 24 hours.

General Input/Output Guidelines
Assume your program is being used by one of the garage clients mentioned above. You should be able
to checkout many cars during a typical day. The only input will be the hours parked per car and the date
and time the car entered. You must park and checkout multiple cars to prove your program works. You
may hard code the input into the Startup class, but the output must be calculated and output using a
receipt for each car, plus a cumulative set of totals for the garage (see below).
In a real parking garage, the date/time of entry would be stored on the ticket. And then when the car
checks out the automated teller machine would read this date/time and perform a calculation relative to
the checkout date/time to come up with the hours parked. If you want to simulate this you can, however,
you do not need to. Instead you can just fake this calculation by providing the hours parked with your
input.

The only required output on the receipt will be the garage business name, the hours parked for a single
car, plus the fee charged for that car.

In addition, separate from the receipt, you should also output running totals for the business day that the
garage owner would want to see. So, for example:

The customer would see this:
Receipt for a car id 105: Best Value Parking Garage, 6.5 hours parked, fee charged: $4.00

The garage owner would see this:
Totals for Garage today: Best Value Parking Garage, 22.5 hours charged, $47.50 collected

The customer would see this:
Receipt for a car id 106: Best Value Parking Garage, 2.5 hours parked, fee charged: $1.75
The garage owner would see this:
Totals for Garage today: Best Value Parking Garage, 25.0 hours charged, $49.25 collected

YOU MUST OUTPUT BOTH CUSTOMER INFO AND GARAGE OWNER INFO WITH EACH
TRANSACTION!!!

The program should simulate an unattended, automated parking machine that issues a ticket when a car
enters the garage, and accepts payment when a car exits the garage. This payment is made using a Credit
Card. You may simulate the insertion of the credit card into the automated teller machine by simply
generating the receipt at a specific point in your program that represents the checkout procedure.
You must process parking transactions for at least 3 cars. And you must be able to switch from one Fee
Strategy to another easily without breaking code and without editing anything more than the Startup
class. You do not need to build any kind of fancy loop to do this. Instead just hard the fee calculator and
the input data for several cars into the startup class and pass that data to the rest of your program. Also,
should you need collections of objects or data, you may only use arrays – no lists allowed.

The basic goal of this project is to end up with a software system that has a flexible fee calculation
system, where different fee strategies can be plugged into the program as needed. You should be able to
test how well this works by modifying your Startup class to switch fee strategies and verify that no other
code changes are necessary and that no other code breaks.